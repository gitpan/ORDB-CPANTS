=head1 NAME

ORDB::CPANTS::Kwalitee - ORDB::CPANTS class for the kwalitee table

=head1 DESCRIPTION

TO BE COMPLETED

=head1 METHODS

=head2 base

  # Returns 'ORDB::CPANTS'
  my $namespace = ORDB::CPANTS::Kwalitee->base;

Normally you will only need to work directly with a table class,
and only with one ORLite package.

However, if for some reason you need to work with multiple ORLite packages
at the same time without hardcoding the root namespace all the time, you
can determine the root namespace from an object or table class with the
C<base> method.

=head2 table

  # Returns 'kwalitee'
  print ORDB::CPANTS::Kwalitee->table;

While you should not need the name of table for any simple operations,
from time to time you may need it programatically. If you do need it,
you can use the C<table> method to get the table name.

=head2 load

  my $object = ORDB::CPANTS::Kwalitee->load( $id );

If your table has single column primary key, a C<load> method will be
generated in the class. If there is no primary key, the method is not
created.

The C<load> method provides a shortcut mechanism for fetching a single
object based on the value of the primary key. However it should only
be used for cases where your code trusts the record to already exists.

It returns a C<ORDB::CPANTS::Kwalitee> object, or throws an exception if the
object does not exist.

=head2 select

  # Get all objects in list context
  my @list = ORDB::CPANTS::Kwalitee->select;
  
  # Get a subset of objects in scalar context
  my $array_ref = ORDB::CPANTS::Kwalitee->select(
      'where id > ? order by id',
      1000,
  );

The C<select> method executes a typical SQL C<SELECT> query on the
kwalitee table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM kwalitee> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns a list of B<ORDB::CPANTS::Kwalitee> objects when called in list context, or a
reference to an C<ARRAY> of B<ORDB::CPANTS::Kwalitee> objects when called in scalar
context.

Throws an exception on error, typically directly from the L<DBI> layer.

=head2 iterate

  ORDB::CPANTS::Kwalitee->iterate( sub {
      print $_->id . "\n";
  } );

The C<iterate> method enables the processing of large tables one record at
a time without loading having to them all into memory in advance.

This plays well to the strength of SQLite, allowing it to do the work of
loading arbitrarily large stream of records from disk while retaining the
full power of Perl when processing the records.

The last argument to C<iterate> must be a subroutine reference that will be
called for each element in the list, with the object provided in the topic
variable C<$_>.

This makes the C<iterate> code fragment above functionally equivalent to the
following, except with an O(1) memory cost instead of O(n).

  foreach ( ORDB::CPANTS::Kwalitee->select ) {
      print $_->id . "\n";
  }

You can filter the list via SQL in the same way you can with C<select>.

  ORDB::CPANTS::Kwalitee->iterate(
      'order by ?', 'id',
      sub {
          print $_->id . "\n";
      }
  );

You can also use it in raw form from the root namespace for better control.
Using this form also allows for the use of arbitrarily complex queries,
including joins. Instead of being objects, rows are provided as C<ARRAY>
references when used in this form.

  ORDB::CPANTS->iterate(
      'select name from kwalitee order by id',
      sub {
          print $_->[0] . "\n";
      }
  );

=head2 count

  # How many objects are in the table
  my $rows = ORDB::CPANTS::Kwalitee->count;
  
  # How many objects 
  my $small = ORDB::CPANTS::Kwalitee->count(
      'where id > ?',
      1000,
  );

The C<count> method executes a C<SELECT COUNT(*)> query on the
kwalitee table.

It takes an optional argument of a SQL phrase to be added after the
C<FROM kwalitee> section of the query, followed by variables
to be bound to the placeholders in the SQL phrase. Any SQL that is
compatible with SQLite can be used in the parameter.

Returns the number of objects that match the condition.

Throws an exception on error, typically directly from the L<DBI> layer.

=head1 ACCESSORS

=head2 id

  if ( $object->id ) {
      print "Object has been inserted\n";
  } else {
      print "Object has not been inserted\n";
  }

Returns true, or throws an exception on error.

REMAINING ACCESSORS TO BE COMPLETED

=head1 SQL

The kwalitee table was originally created with the
following SQL command.

  CREATE TABLE kwalitee (
      id integer not null,
      dist integer,
      abs_kw integer not null,
      abs_core_kw integer not null,
      kwalitee numeric not null,
      rel_core_kw numeric not null,
      extractable integer not null,
      extracts_nicely integer not null,
      has_version integer not null,
      has_proper_version integer not null,
      no_cpants_errors integer not null,
      has_readme integer not null,
      has_manifest integer not null,
      has_meta_yml integer not null,
      has_buildtool integer not null,
      has_changelog integer not null,
      no_symlinks integer not null,
      has_tests integer not null,
      proper_libs integer not null,
      is_prereq integer not null,
      use_strict integer not null,
      use_warnings integer not null,
      has_test_pod integer not null,
      has_test_pod_coverage integer not null,
      no_pod_errors integer not null,
      has_working_buildtool integer not null,
      manifest_matches_dist integer not null,
      has_example integer not null,
      buildtool_not_executable integer not null,
      has_humanreadable_license integer not null,
      metayml_is_parsable integer not null,
      metayml_conforms_spec_current integer not null,
      metayml_has_license integer not null,
      metayml_conforms_to_known_spec integer not null,
      has_license integer not null,
      prereq_matches_use integer not null,
      build_prereq_matches_use integer not null,
      no_generated_files integer not null,
      run integer,
      has_version_in_each_file integer not null,
      has_tests_in_t_dir integer not null,
      no_stdin_for_prompting integer not null,
      easily_repackageable_by_fedora integer not null,
      easily_repackageable_by_debian integer not null,
      easily_repackageable integer not null,
      fits_fedora_license integer not null,
      metayml_declares_perl_version integer not null,
      no_large_files integer,
      has_separate_license_file integer not null,
      has_license_in_source_file integer not null,
      metayml_has_provides integer not null,
      uses_test_nowarnings integer not null,
      latest_version_distributed_by_debian integer not null,
      has_no_bugs_reported_in_debian integer not null,
      has_no_patches_in_debian integer not null,
      distributed_by_debian integer not null,
      has_better_auto_install integer not null,
      primary key (id)
  )

=head1 SUPPORT

ORDB::CPANTS::Kwalitee is part of the L<ORDB::CPANTS> API.

See the documentation for L<ORDB::CPANTS> for more information.

=head1 AUTHOR

Adam Kennedy E<lt>adamk@cpan.orgE<gt>

=head1 COPYRIGHT

Copyright 2009 - 2012 Adam Kennedy.

This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.

The full text of the license can be found in the
LICENSE file included with this module.

